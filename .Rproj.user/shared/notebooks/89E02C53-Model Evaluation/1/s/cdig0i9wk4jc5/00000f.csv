"0","run_lagged_rf_logit <- function(df, percent_cover_cols){"
"0","  # 1. Convert percent to 0-1 and logit-transform"
"0","    df <- df %>%"
"0","    mutate(across(all_of(percent_cover_cols), ~ . / 100)) %>%"
"0","    mutate(across(all_of(percent_cover_cols), ~ qlogis(pmin(pmax(., 0.0001), 0.9999))))"
"0","  # 2. Create 1-year lagged predictors by plot_id"
"0","  df_lag <- df %>%"
"0","    arrange(plot_id, start_date) %>%"
"0","    group_by(plot_id) %>%"
"0","    mutate(across(all_of(percent_cover_cols), ~ dplyr::lag(., n = 1), .names = ""lag1_{col}"")) %>%"
"0","    ungroup() %>%"
"0","    filter(!is.na(lag1_rockweed_fucus_spp))"
"0","  "
"0","  # 3. Random Forest model formulas"
"0","  predictors <- grep(""^lag1_"", names(df_lag), value = TRUE)"
"0","  formula_asco <- as.formula(paste(""knotted_wrack_a_nodosum ~"", paste(predictors, collapse = "" + "")))"
"0","  formula_fuc <- as.formula(paste(""rockweed_fucus_spp ~"", paste(predictors, collapse = "" + "")))"
"0","  "
"0","  # 4. Cross-validation setup"
"0","  train_control <- trainControl(method = ""cv"", number = 10)"
"0","  "
"0","  # 5. Tune grid for mtry and ntree together"
"0","  mtry_values <- seq(2, length(predictors), by = 2)"
"0","  ntree_values <- seq(100, 1000, by=50)"
"0","  tune_grid <- expand.grid(mtry = mtry_values, .ntree = ntree_values) # placeholder for caret; will handle ntree in loop"
"0","  "
"0","  # 6. Tune Ascophyllum RF"
"0","  best_rmse_asco <- Inf"
"0","  for (m in mtry_values) {"
"0","    for (n in ntree_values) {"
"0","      model <- randomForest(formula_asco, df_lag, mtry = m, ntree = n)"
"0","      preds <- predict(model, df_lag)"
"0","      rmse_val <- sqrt(mean((100*plogis(preds) - 100*plogis(df_lag$knotted_wrack_a_nodosum))^2))"
"0","      if (rmse_val < best_rmse_asco) {"
"0","        best_rmse_asco <- rmse_val"
"0","        rf_asco <- model"
"0","      }"
"0","    }"
"0","  }"
"0","  "
"0","  # 7. Tune Fucus RF"
"0","  best_rmse_fuc <- Inf"
"0","  for (m in mtry_values) {"
"0","    for (n in ntree_values) {"
"0","      model <- randomForest(formula_fuc, df_lag, mtry = m, ntree = n)"
"0","      preds <- predict(model, df_lag)"
"0","      rmse_val <- sqrt(mean((100*plogis(preds) - 100*plogis(df_lag$rockweed_fucus_spp))^2))"
"0","      if (rmse_val < best_rmse_fuc) {"
"0","        best_rmse_fuc <- rmse_val"
"0","        rf_fuc <- model"
"0","      }"
"0","    }"
"0","  }"
"0","  "
"0","  # 8. Predict on training data"
"0","  pred_asco <- 100 * plogis(predict(rf_asco, df_lag))"
"0","  pred_fuc  <- 100 * plogis(predict(rf_fuc, df_lag))"
"0","  actual_asco <- 100 * plogis(df_lag$knotted_wrack_a_nodosum)"
"0","  actual_fuc  <- 100 * plogis(df_lag$rockweed_fucus_spp)"
"0","  "
"0","  # 9. Compute metrics"
"0","  metrics <- data.frame("
"0","    Species = c(""Ascophyllum"", ""Fucus""),"
"0","    R2 = c(cor(actual_asco, pred_asco)^2, cor(actual_fuc, pred_fuc)^2),"
"0","    MSE = c(mean((actual_asco - pred_asco)^2), mean((actual_fuc - pred_fuc)^2)),"
"0","    RMSE = c(sqrt(mean((actual_asco - pred_asco)^2)), sqrt(mean((actual_fuc - pred_fuc)^2)))"
"0","  )"
"0","  "
"0","  # 10. Collect best hyperparameters"
"0","  best_params <- data.frame("
"0","    Species = c(""Ascophyllum"", ""Fucus""),"
"0","    mtry = c(rf_asco$mtry, rf_fuc$mtry),"
"0","    ntree = c(rf_asco$ntree, rf_fuc$ntree)"
"0","  )"
"0","  "
"0","  return(list(Metrics = metrics, Best_Hyperparameters = best_params))"
"0","}"
"0",""
"0","#run_lagged_rf(logit_data,percent_cover_cols = percent_cover_cols)"
