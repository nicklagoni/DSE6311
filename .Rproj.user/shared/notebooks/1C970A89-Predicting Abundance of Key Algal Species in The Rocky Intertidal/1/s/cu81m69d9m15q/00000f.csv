"0","xgb_model <- function(df, percent_cover_cols, unimportant_vars) {"
"0","  "
"0","  #Create 1-year lagged predictor vars"
"0","  df_lag <- df %>%"
"0","    arrange(plot_id, start_date) %>%"
"0","    group_by(plot_id) %>%"
"0","    mutate(across(-any_of(c(""plot_id"",""start_date"")), ~ dplyr::lag(., n = 1), .names = ""lag1_{col}"")) %>%"
"0","    ungroup() %>%"
"0","    filter(!is.na(lag1_rockweed_fucus_spp)) %>%"
"0","    filter(!is.na(lag1_knotted_wrack_a_nodosum)) %>%"
"0","    select(-unimportant_vars)"
"0","  "
"0","  #Train-test split: reserving 2018 as a hold out validation year as it is the most recent year"
"0","  train_data <- df_lag %>% filter(start_date != 2018)"
"0","  test_data  <- df_lag %>% filter(start_date == 2018)"
"0","  "
"0","  predictors <- grep(""^lag1_"", names(df_lag), value = TRUE)"
"0","  "
"0","  #Set up hyperparameter grid"
"0","  eta_values <- c(0.05, 0.1, 0.2)"
"0","  max_depth_values <- c(3, 5, 7)"
"0","  subsample_values <- c(0.7, 0.8, 1)"
"0","  colsample_values <- c(0.7, 0.8, 1)"
"0","  "
"0","  #Optimize Ascophyllum XGBoost"
"0","  best_rmse_asco <- Inf"
"0","  for(eta in eta_values){"
"0","    for(md in max_depth_values){"
"0","      for(ss in subsample_values){"
"0","        for(cs in colsample_values){"
"0","          "
"0","          dtrain <- xgb.DMatrix(as.matrix(train_data[, predictors]), label = train_data$knotted_wrack_a_nodosum)"
"0","          dtest  <- xgb.DMatrix(as.matrix(test_data[, predictors]), label = test_data$knotted_wrack_a_nodosum)"
"0","          "
"0","          model <- xgb.train("
"0","            params = list(objective = ""reg:squarederror"","
"0","                          eta = eta,"
"0","                          max_depth = md,"
"0","                          subsample = ss,"
"0","                          colsample_bytree = cs),"
"0","            data = dtrain,"
"0","            nrounds = 1000,"
"0","            watchlist = list(val = dtest),"
"0","            early_stopping_rounds = 20,"
"0","            verbose = 0"
"0","          )"
"0","          "
"0","          preds <- predict(model, dtest)"
"0","          rmse_val <- sqrt(mean((preds - test_data$knotted_wrack_a_nodosum)^2))"
"0","          "
"0","          if(rmse_val < best_rmse_asco){"
"0","            best_rmse_asco <- rmse_val"
"0","            xgb_asco <- model"
"0","            best_params_asco <- list(eta = eta, max_depth = md, subsample = ss,"
"0","                                     colsample_bytree = cs, nrounds = model$best_iteration)"
"0","          }"
"0","        }"
"0","      }"
"0","    }"
"0","  }"
"0","  "
"0","  #Tune Fucus XGBoost model"
"0","  best_rmse_fuc <- Inf"
"0","  for(eta in eta_values){"
"0","    for(md in max_depth_values){"
"0","      for(ss in subsample_values){"
"0","        for(cs in colsample_values){"
"0","          "
"0","          dtrain <- xgb.DMatrix(as.matrix(train_data[, predictors]), label = train_data$rockweed_fucus_spp)"
"0","          dtest  <- xgb.DMatrix(as.matrix(test_data[, predictors]), label = test_data$rockweed_fucus_spp)"
"0","          "
"0","          model <- xgb.train("
"0","            params = list(objective = ""reg:squarederror"","
"0","                          eta = eta,"
"0","                          max_depth = md,"
"0","                          subsample = ss,"
"0","                          colsample_bytree = cs),"
"0","            data = dtrain,"
"0","            nrounds = 1000,"
"0","            watchlist = list(val = dtest),"
"0","            early_stopping_rounds = 20,"
"0","            verbose = 0"
"0","          )"
"0","          "
"0","          preds <- predict(model, dtest)"
"0","          rmse_val <- sqrt(mean((preds - test_data$rockweed_fucus_spp)^2))"
"0","          "
"0","          if(rmse_val < best_rmse_fuc){"
"0","            best_rmse_fuc <- rmse_val"
"0","            xgb_fuc <- model"
"0","            best_params_fuc <- list(eta = eta, max_depth = md, subsample = ss,"
"0","                                    colsample_bytree = cs, nrounds = model$best_iteration)"
"0","          }"
"0","        }"
"0","      }"
"0","    }"
"0","  }"
"0","  "
"0","  #Pulling Predictions"
"0","  pred_asco <- predict(xgb_asco, as.matrix(test_data[, predictors]))"
"0","  pred_fuc <- predict(xgb_fuc, as.matrix(test_data[, predictors]))"
"0","  "
"0","  #Pulling Metrics"
"0","  metrics <- data.frame("
"0","    Species = c(""Ascophyllum"", ""Fucus""),"
"0","    R2 = c(cor(test_data$knotted_wrack_a_nodosum, pred_asco)^2,"
"0","           cor(test_data$rockweed_fucus_spp, pred_fuc)^2),"
"0","    RMSE = c(sqrt(mean((test_data$knotted_wrack_a_nodosum - pred_asco)^2)),"
"0","             sqrt(mean((test_data$rockweed_fucus_spp - pred_fuc)^2)))"
"0","  )"
"0","  "
"0","  #Baseline metrics"
"0","  baseline_asco <- test_data$lag1_knotted_wrack_a_nodosum"
"0","  baseline_fuc  <- test_data$lag1_rockweed_fucus_spp"
"0","  baseline_metrics <- data.frame("
"0","    Species = c(""Ascophyllum"", ""Fucus""),"
"0","    R2  = c(cor(test_data$knotted_wrack_a_nodosum, baseline_asco)^2,"
"0","            cor(test_data$rockweed_fucus_spp, baseline_fuc)^2),"
"0","    RMSE = c(sqrt(mean((test_data$knotted_wrack_a_nodosum - baseline_asco)^2)),"
"0","             sqrt(mean((test_data$rockweed_fucus_spp - baseline_fuc)^2)))"
"0","  )"
"0","  "
"0","  #Pulling hyperparameters"
"0","  best_params <- data.frame("
"0","    Species = c(""Ascophyllum"", ""Fucus""),"
"0","    eta = c(best_params_asco$eta, best_params_fuc$eta),"
"0","    max_depth = c(best_params_asco$max_depth, best_params_fuc$max_depth),"
"0","    subsample = c(best_params_asco$subsample, best_params_fuc$subsample),"
"0","    colsample_bytree = c(best_params_asco$colsample_bytree, best_params_fuc$colsample_bytree),"
"0","    nrounds = c(best_params_asco$nrounds, best_params_fuc$nrounds),"
"0","    best_rmse = c(best_rmse_asco, best_rmse_fuc)"
"0","  )"
"0",""
"0",""
"0",""
"0",""
"0","  #output results"
"0","  return(list("
"0","    XGB_Metrics = metrics,"
"0","    Baseline_Metrics = baseline_metrics,"
"0","    Best_Hyperparameters = best_params,"
"0","    XGB_Models = list(Ascophyllum = xgb_asco, Fucus = xgb_fuc),"
"0","    Test_Data = test_data,"
"0","    Predictors = predictors"
"0","  ))"
"0","}"
