hist(data_pa$rockweed_fucus_spp, main = "Fucus spp. Cover", xlab = "Percent Cover")
hist(data_pa$knotted_wrack_a_nodosum, main = "Ascophyllum nodosum Cover", xlab = "Percent Cover")
nmds<-metaMDS(numeric_data, distance = "bray", k = 2)
plot(nmds, main="NMDS Plot of NETN Rocky Intertidal Data")
stressplot(nmds)
hellinger_data<-decostand(numeric_data,method="hellinger")
pca_result <- prcomp(hellinger_data, scale. = FALSE, center = FALSE)
explained_var <- summary(pca_result)$importance[2, ]
plot(explained_var,type="b",main="Hellinger-Transformed PCA Results Scree Plot",ylab="Proportion of Variance Explained",xlab="No. of Principal Components")
as.data.frame(explained_var)
flexible_lagged_rf_model <- function(df, percent_cover_cols, logit_transform = FALSE, unimportant_vars) {
# 1. Optional logit transform
if(logit_transform) {
df <- df %>%
mutate(across(all_of(percent_cover_cols), ~ . / 100)) %>%
mutate(across(all_of(percent_cover_cols), ~ qlogis(pmin(pmax(., 0.0001), 0.9999))))
}
# 2. Create 1-year lagged predictors
df_lag <- df %>%
arrange(plot_id, start_date) %>%
group_by(plot_id) %>%
mutate(across(all_of(percent_cover_cols), ~ dplyr::lag(., n = 1), .names = "lag1_{col}")) %>%
ungroup() %>%
filter(!is.na(lag1_rockweed_fucus_spp)) %>%
select(-unimportant_vars)
train_data <- df_lag %>% filter(start_date != 2018)
test_data  <- df_lag %>% filter(start_date == 2018)
# 4. Formulas
predictors <- grep("^lag1_", names(df_lag), value = TRUE)
formula_asco <- as.formula(paste("knotted_wrack_a_nodosum ~",
paste(predictors, collapse = " + ")))
formula_fuc <- as.formula(paste("rockweed_fucus_spp ~",
paste(predictors, collapse = " + ")))
# 5. Tuning ranges
mtry_values <- seq(2, floor(length(predictors)/2), by = 2)
ntree_values <- seq(1, 1000, by = 50)
# 6. Tune Ascophyllum RF
best_rmse_asco <- Inf
for(m in mtry_values){
for(n in ntree_values){
model <- randomForest(formula_asco, train_data, mtry = m, ntree = n)
preds <- predict(model, test_data)
if(logit_transform) preds <- 100 * plogis(preds)
rmse_val <- sqrt(mean((preds - test_data$knotted_wrack_a_nodosum)^2))
if(rmse_val < best_rmse_asco){
best_rmse_asco <- rmse_val
rf_asco <- model
}
}
}
# 7. Tune Fucus RF
best_rmse_fuc <- Inf
for(m in mtry_values){
for(n in ntree_values){
model <- randomForest(formula_fuc, train_data, mtry = m, ntree = n)
preds <- predict(model, test_data)
if(logit_transform) preds <- 100 * plogis(preds)
rmse_val <- sqrt(mean((preds - test_data$rockweed_fucus_spp)^2))
if(rmse_val < best_rmse_fuc){
best_rmse_fuc <- rmse_val
rf_fuc <- model
}
}
}
# 8. Predictions
pred_asco <- predict(rf_asco, test_data)
pred_fuc <- predict(rf_fuc, test_data)
if(logit_transform){
pred_asco <- 100 * plogis(pred_asco)
pred_fuc <- 100 * plogis(pred_fuc)
}
# 9. Metrics
metrics <- data.frame(
Species = c("Ascophyllum", "Fucus"),
R2 = c(cor(test_data$knotted_wrack_a_nodosum, pred_asco)^2,
cor(test_data$rockweed_fucus_spp, pred_fuc)^2),
MSE = c(mean((test_data$knotted_wrack_a_nodosum - pred_asco)^2),
mean((test_data$rockweed_fucus_spp - pred_fuc)^2)),
RMSE = c(sqrt(mean((test_data$knotted_wrack_a_nodosum - pred_asco)^2)),
sqrt(mean((test_data$rockweed_fucus_spp - pred_fuc)^2)))
)
# 10. Best hyperparameters
best_params <- data.frame(
Species = c("Ascophyllum", "Fucus"),
mtry = c(rf_asco$mtry, rf_fuc$mtry),
ntree = c(rf_asco$ntree, rf_fuc$ntree)
)
# 11. Baseline for model comparison
baseline_asco <- test_data$lag1_knotted_wrack_a_nodosum
baseline_fuc  <- test_data$lag1_rockweed_fucus_spp
baseline_metrics <- data.frame(
Species = c("Ascophyllum", "Fucus"),
R2  = c(cor(test_data$knotted_wrack_a_nodosum, baseline_asco)^2,
cor(test_data$rockweed_fucus_spp, baseline_fuc)^2),
MSE = c(mean((test_data$knotted_wrack_a_nodosum - baseline_asco)^2),
mean((test_data$rockweed_fucus_spp - baseline_fuc)^2)),
RMSE = c(sqrt(mean((test_data$knotted_wrack_a_nodosum - baseline_asco)^2)),
sqrt(mean((test_data$rockweed_fucus_spp - baseline_fuc)^2)))
)
if(logit_transform){
baseline_metrics <- data.frame(
Species = c("Ascophyllum", "Fucus"),
R2  = c(cor(test_data$knotted_wrack_a_nodosum, baseline_asco)^2,
cor(test_data$rockweed_fucus_spp, baseline_fuc)^2),
MSE = c(mean((100*plogis(test_data$knotted_wrack_a_nodosum) - baseline_asco)^2),
mean((100*plogis(test_data$rockweed_fucus_spp) - baseline_fuc)^2)),
RMSE = c(sqrt(mean((100*plogis(test_data$knotted_wrack_a_nodosum) - baseline_asco)^2)),
sqrt(mean((100*plogis(test_data$rockweed_fucus_spp) - baseline_fuc)^2)))
)}
# 12. Return baseline and modeling metrics
return(list(
RF_Metrics = metrics,
Baseline_Metrics = baseline_metrics,
Best_Hyperparameters = best_params))
}
#Model_results
#logit_results_oob<-flexible_lagged_oob_model(df=clean_data,logit_transform = TRUE, percent_cover_cols = percent_cover_cols, unimportant_vars = unimportant_vars)
#raw_results_oob<-flexible_lagged_oob_model(clean_data,logit_transform = FALSE,percent_cover_cols = percent_cover_cols, unimportant_vars = unimportant_vars)
raw_results<-flexible_lagged_rf_model(clean_data,percent_cover_cols = percent_cover_cols,logit_transform = FALSE, unimportant_vars = unimportant_vars)
logit_results<-flexible_lagged_rf_model(clean_data,percent_cover_cols = percent_cover_cols,logit_transform = TRUE, unimportant_vars = unimportant_vars)
# Merge by Species
summary_table <- merge(raw_results$RF_Metrics, raw_results$Baseline_Metrics, by = "Species", suffixes = c("_RF", "_Baseline"))
# Compute improvements
summary_table <- summary_table %>%
mutate(
R2_Delta       = R2_RF - R2_Baseline,
RMSE_Reduction = RMSE_Baseline - RMSE_RF
) %>%
select(Species,
R2_RF, R2_Baseline, R2_Delta,
RMSE_RF, RMSE_Baseline, RMSE_Reduction)
#Logit results summary table
summary_table_logit <- merge(logit_results$RF_Metrics, logit_results$Baseline_Metrics, by = "Species", suffixes = c("_RF", "_Baseline")) %>%
mutate(
R2_Delta       = R2_RF - R2_Baseline,
RMSE_Reduction = RMSE_Baseline - RMSE_RF,
Type = "Logit Random Forest"
) %>%
select(Type, Species, R2_RF, R2_Baseline, R2_Delta, RMSE_RF, RMSE_Baseline, RMSE_Reduction)
# Table for raw_results only
summary_table_raw <- summary_table %>%
mutate(Type = "Random Forest") %>%
select(Type, Species, R2_RF, R2_Baseline, R2_Delta, RMSE_RF, RMSE_Baseline, RMSE_Reduction)
# Combine both
final_summary <- rbind(summary_table_raw, summary_table_logit)
final_summary
final_summary_gt <- final_summary %>%
gt(rowname_col = "Species") %>%
tab_header(
title = "Random Forest vs Baseline Performance"
) %>%
fmt_number(
columns = c(R2_RF, R2_Baseline, R2_Delta, RMSE_RF, RMSE_Baseline, RMSE_Reduction),
decimals = 3
) %>%
tab_spanner(
label = "RÂ²",
columns = c(R2_RF, R2_Baseline, R2_Delta)
) %>%
tab_spanner(
label = "RMSE",
columns = c(RMSE_RF, RMSE_Baseline, RMSE_Reduction)
) %>%
cols_label(
Type = "Model Type",
R2_RF = "RF",
R2_Baseline = "Baseline",
R2_Delta = "Difference",
RMSE_RF = "RF",
RMSE_Baseline = "Baseline",
RMSE_Reduction = "Difference"
)
final_summary_gt
xgb_model <- function(df, percent_cover_cols, unimportant_vars) {
#Create 1-year lagged predictor vars
df_lag <- df %>%
arrange(plot_id, start_date) %>%
group_by(plot_id) %>%
mutate(across(-any_of(c("plot_id","start_date")), ~ dplyr::lag(., n = 1), .names = "lag1_{col}")) %>%
ungroup() %>%
filter(!is.na(lag1_rockweed_fucus_spp)) %>%
filter(!is.na(lag1_knotted_wrack_a_nodosum)) %>%
select(-unimportant_vars)
#Train-test split: reserving 2018 as a hold out validation year as it is the most recent year
train_data <- df_lag %>% filter(start_date != 2018)
test_data  <- df_lag %>% filter(start_date == 2018)
predictors <- grep("^lag1_", names(df_lag), value = TRUE)
#Set up hyperparameter grid
eta_values <- c(0.05, 0.1, 0.2)
max_depth_values <- c(3, 5, 7)
subsample_values <- c(0.7, 0.8, 1)
colsample_values <- c(0.7, 0.8, 1)
#Optimize Ascophyllum XGBoost
best_rmse_asco <- Inf
for(eta in eta_values){
for(md in max_depth_values){
for(ss in subsample_values){
for(cs in colsample_values){
dtrain <- xgb.DMatrix(as.matrix(train_data[, predictors]), label = train_data$knotted_wrack_a_nodosum)
dtest  <- xgb.DMatrix(as.matrix(test_data[, predictors]), label = test_data$knotted_wrack_a_nodosum)
model <- xgb.train(
params = list(objective = "reg:squarederror",
eta = eta,
max_depth = md,
subsample = ss,
colsample_bytree = cs),
data = dtrain,
nrounds = 1000,
watchlist = list(val = dtest),
early_stopping_rounds = 20,
verbose = 0
)
preds <- predict(model, dtest)
rmse_val <- sqrt(mean((preds - test_data$knotted_wrack_a_nodosum)^2))
if(rmse_val < best_rmse_asco){
best_rmse_asco <- rmse_val
xgb_asco <- model
best_params_asco <- list(eta = eta, max_depth = md, subsample = ss,
colsample_bytree = cs, nrounds = model$best_iteration)
}
}
}
}
}
#Tune Fucus XGBoost model
best_rmse_fuc <- Inf
for(eta in eta_values){
for(md in max_depth_values){
for(ss in subsample_values){
for(cs in colsample_values){
dtrain <- xgb.DMatrix(as.matrix(train_data[, predictors]), label = train_data$rockweed_fucus_spp)
dtest  <- xgb.DMatrix(as.matrix(test_data[, predictors]), label = test_data$rockweed_fucus_spp)
model <- xgb.train(
params = list(objective = "reg:squarederror",
eta = eta,
max_depth = md,
subsample = ss,
colsample_bytree = cs),
data = dtrain,
nrounds = 1000,
watchlist = list(val = dtest),
early_stopping_rounds = 20,
verbose = 0
)
preds <- predict(model, dtest)
rmse_val <- sqrt(mean((preds - test_data$rockweed_fucus_spp)^2))
if(rmse_val < best_rmse_fuc){
best_rmse_fuc <- rmse_val
xgb_fuc <- model
best_params_fuc <- list(eta = eta, max_depth = md, subsample = ss,
colsample_bytree = cs, nrounds = model$best_iteration)
}
}
}
}
}
#Pulling Predictions
pred_asco <- predict(xgb_asco, as.matrix(test_data[, predictors]))
pred_fuc <- predict(xgb_fuc, as.matrix(test_data[, predictors]))
#Pulling Metrics
metrics <- data.frame(
Species = c("Ascophyllum", "Fucus"),
R2 = c(cor(test_data$knotted_wrack_a_nodosum, pred_asco)^2,
cor(test_data$rockweed_fucus_spp, pred_fuc)^2),
RMSE = c(sqrt(mean((test_data$knotted_wrack_a_nodosum - pred_asco)^2)),
sqrt(mean((test_data$rockweed_fucus_spp - pred_fuc)^2)))
)
#Baseline metrics
baseline_asco <- test_data$lag1_knotted_wrack_a_nodosum
baseline_fuc  <- test_data$lag1_rockweed_fucus_spp
baseline_metrics <- data.frame(
Species = c("Ascophyllum", "Fucus"),
R2  = c(cor(test_data$knotted_wrack_a_nodosum, baseline_asco)^2,
cor(test_data$rockweed_fucus_spp, baseline_fuc)^2),
RMSE = c(sqrt(mean((test_data$knotted_wrack_a_nodosum - baseline_asco)^2)),
sqrt(mean((test_data$rockweed_fucus_spp - baseline_fuc)^2)))
)
#Pulling hyperparameters
best_params <- data.frame(
Species = c("Ascophyllum", "Fucus"),
eta = c(best_params_asco$eta, best_params_fuc$eta),
max_depth = c(best_params_asco$max_depth, best_params_fuc$max_depth),
subsample = c(best_params_asco$subsample, best_params_fuc$subsample),
colsample_bytree = c(best_params_asco$colsample_bytree, best_params_fuc$colsample_bytree),
nrounds = c(best_params_asco$nrounds, best_params_fuc$nrounds),
best_rmse = c(best_rmse_asco, best_rmse_fuc)
)
#output results
return(list(
XGB_Metrics = metrics,
Baseline_Metrics = baseline_metrics,
Best_Hyperparameters = best_params,
XGB_Models = list(Ascophyllum = xgb_asco, Fucus = xgb_fuc),
Test_Data = test_data,
Predictors = predictors
))
}
xgb_results<-xgb_model(clean_data,percent_cover_cols = percent_cover_cols,unimportant_vars = unimportant_vars)
# Merge by Species
summary_table_xgb <- merge(xgb_results$XGB_Metrics, xgb_results$Baseline_Metrics, by = "Species", suffixes = c("_XGB", "_Baseline"))
# Compute improvements
summary_table_xgb <- summary_table_xgb %>%
mutate(
R2_Delta       = R2_XGB - R2_Baseline,
RMSE_Reduction = RMSE_Baseline - RMSE_XGB,
Type = "xgBoost"
) %>%
select(Type, Species,
R2_XGB, R2_Baseline, R2_Delta,
RMSE_XGB, RMSE_Baseline, RMSE_Reduction)
summary_table_xgb
names(summary_table_raw)<-c("Type","Species","R2","R2_Baseline","R2_Delta","RMSE","RMSE_Baseline","RMSE_Reduction")
names(summary_table_logit)<-c("Type","Species","R2","R2_Baseline","R2_Delta","RMSE","RMSE_Baseline","RMSE_Reduction")
names(summary_table_xgb)<-c("Type","Species","R2","R2_Baseline","R2_Delta","RMSE","RMSE_Baseline","RMSE_Reduction")
final_summary<-rbind(summary_table_raw,summary_table_logit,summary_table_xgb)
final_summary
final_summary_gt <- final_summary %>%
gt(rowname_col = "Species") %>%
tab_header(
title = "Random Forest and xgBoost vs Baseline Performance"
) %>%
fmt_number(
columns = c(R2, R2_Baseline, R2_Delta, RMSE, RMSE_Baseline, RMSE_Reduction),
decimals = 3
) %>%
tab_spanner(
label = "RÂ²",
columns = c(R2, R2_Baseline, R2_Delta),
id = "R2_spanner"
) %>%
tab_spanner(
label = "RMSE",
columns = c(RMSE, RMSE_Baseline, RMSE_Reduction),
id = "RMSE_spanner"
) %>%
cols_label(
Type = "Model Type",
R2 = "Model",
R2_Baseline = "Baseline",
R2_Delta = "Difference",
RMSE = "Model",
RMSE_Baseline = "Baseline",
RMSE_Reduction = "Difference"
) %>%
tab_row_group(
label = "xgBoost",
rows = Type == "xgBoost"
) %>%
tab_row_group(
label = "Logit Transformed Random Forest",
rows = Type == "Logit Random Forest"
) %>%
tab_row_group(
label = "Untransformed Random Forest",
rows = Type == "Random Forest"
) %>%
tab_style(
style=cell_text(style="italic"),
locations = cells_row_groups()
) %>%
cols_hide(columns = "Type")
final_summary_gt%>%
gtsave("rf_xgboost_comparison_table.png")
# List to rename variables for prettier viewing in the plots.
pretty_names <- c(
lag1_other_algae_green                                  = "Other green algae",
lag1_other_algae_red                                    = "Other red algae",
lag1_articulated_corallines                             = "Articulated corallines",
lag1_ascophyllum_epibont                                = "Ascophyllum epibiont",
lag1_knotted_wrack_a_nodosum                            = "Knotted wrack (Ascophyllum nodosum)",
lag1_barnacle_e_g_s_balanoides                          = "Barnacles",
lag1_irish_moss_chondrus_mastocarpus                    = "Irish moss (Chondrus/Mastocarpus)",
lag1_fucus_epibiont                                     = "Fucus epibiont",
lag1_rockweed_fucus_spp                                 = "Rockweed (Fucus vesiculosus)",
lag1_kelp_e_g_laminaria_alaria                          = "Kelp (Laminaria/Alaria)",
lag1_mussel_e_g_mytilus_edulis                          = "Blue mussel",
lag1_crustose_non_coraline                              = "Crustose non-coralline algae",
lag1_other_invertebrate                                 = "Other invertebrates",
lag1_other_substrate                                    = "Other substrate",
lag1_dulse_palmaria_palmata                             = "Dulse (Palmaria palmata)",
lag1_laver_porphyra_spp                                 = "Laver (Porphyra spp.)",
lag1_rock                                               = "Rock",
lag1_sea_lettuce_ulva_lactuca                           = "Sea lettuce (Ulva lactuca)",
lag1_unidentified                                       = "Unidentified substrate",
lag1_common_periwinkle_littorina_littorea               = "Common periwinkle (L. littorea) count",
lag1_smooth_periwinkle_littorina_obtusata               = "Smooth periwinkle (L. obtusata) count",
lag1_rough_periwinkle_littorina_saxatilis               = "Rough periwinkle (L. saxatilis) count",
lag1_dogwhelk_nucella_lapillus                          = "Dogwhelk count (N. lapillus)",
lag1_limpet_tectura_testudinalis                        = "Limpet count (T. testudinalis)",
lag1_smooth_periwinkle_littorina_obtusata_mean_measure  = "Smooth periwinkle (L. obtusata) mean size",
lag1_common_periwinkle_littorina_littorea_mean_measure  = "Common periwinkle (L. littorea) mean size",
lag1_dogwhelk_nucella_lapillus_mean_measure             = "Dogwhelk mean size (N. lapillus)",
lag1_limpet_tectura_testudinalis_mean_measure           = "Limpet mean size (T. testudinalis)",
lag1_rough_periwinkle_littorina_saxatilis_mean_measure  = "Rough periwinkle (L. saxatilis) mean size"
)
#Pulling SHAP values from xgboost output
shap_values_asco <- shap.values(
xgb_model = xgb_results$XGB_Models$Ascophyllum,
X_train = as.matrix(xgb_results$Test_Data[, xgb_results$Predictors]))
# Prepping data into proper format for SHAP plot
shap_long_asco <- shap.prep(
shap_contrib = shap_values_asco$shap_score,
X_train = as.matrix(xgb_results$Test_Data[, xgb_results$Predictors]))%>%
mutate(variable = recode(variable, !!!pretty_names))
# SHAP plot
(shap.plot.summary(shap_long_asco)+
ggtitle("Impact of Time Lagged Predictor Variables on Model \nPrediction of Ascophyllum Nodosum Percent Cover")+
xlab("Time Lagged Predictors (1 year)"))%>%
ggsave(filename = "shap_asco_plot.png")
#Repeating steps for Fucus
shap_values_fuc <- shap.values(
xgb_model = xgb_results$XGB_Models$Fucus,
X_train = as.matrix(xgb_results$Test_Data[, xgb_results$Predictors]))
# Prepping data into proper format for SHAP plot
shap_long_fuc <- shap.prep(
shap_contrib = shap_values_fuc$shap_score,
X_train = as.matrix(xgb_results$Test_Data[, xgb_results$Predictors]))%>%
mutate(variable = recode(variable, !!!pretty_names))
# SHAP plot
(shap.plot.summary(shap_long_fuc)+
ggtitle("Impact of Time Lagged Predictor Variables on Model \nPrediction of Fucus Vesiculosus Percent Cover")+
xlab("Time Lagged Predictors (1 year)"))%>%
ggsave(filename = "shap_fucus_plot.png")
xgb_results$Best_Hyperparameters
xgb_results$Best_Hyperparameters %>%
gt() %>%
tab_header(
title = "Optimal XGBoost Hyperparameters by Species"
) %>%
fmt_number(
columns = c(eta, subsample, colsample_bytree, best_rmse),
decimals = 2
) %>%
fmt_number(
columns = nrounds,
decimals = 0
) %>%
tab_spanner(
label = "Sampling Parameters",
columns = c(subsample, colsample_bytree)
) %>%
tab_spanner(
label = "Tree Parameters",
columns = c(eta, max_depth, nrounds)
) %>%
cols_label(
eta = html("Î· (Learning Rate)"),
max_depth = "Max Depth",
subsample = "Row Subsample",
colsample_bytree = "Column Subsample",
nrounds = "Boosting Rounds",
best_rmse = "Best RMSE"
)
xgb_results$Best_Hyperparameters %>%
gt() %>%
tab_header(
title = "Optimal XGBoost Hyperparameters by Species"
) %>%
fmt_number(
columns = c(eta, subsample, colsample_bytree, best_rmse),
decimals = 2
) %>%
fmt_number(
columns = nrounds,
decimals = 0
) %>%
tab_spanner(
label = "Sampling Parameters",
columns = c(subsample, colsample_bytree)
) %>%
tab_spanner(
label = "Tree Parameters",
columns = c(eta, max_depth, nrounds)
) %>%
cols_label(
eta = html("Learning Rate(Î·)"),
max_depth = "Max Depth",
subsample = "Row Subsample",
colsample_bytree = "Column Subsample",
nrounds = "Boosting Rounds",
best_rmse = "Best RMSE"
)
xgb_results$Best_Hyperparameters %>%
gt() %>%
tab_header(
title = "Optimal XGBoost Model Hyperparameters"
) %>%
fmt_number(
columns = c(eta, subsample, colsample_bytree, best_rmse),
decimals = 2
) %>%
fmt_number(
columns = nrounds,
decimals = 0
) %>%
tab_spanner(
label = "Sampling Parameters",
columns = c(subsample, colsample_bytree)
) %>%
tab_spanner(
label = "Tree Parameters",
columns = c(eta, max_depth, nrounds)
) %>%
cols_label(
eta = html("Learning Rate(Î·)"),
max_depth = "Max Depth",
subsample = "Row Subsample",
colsample_bytree = "Column Subsample",
nrounds = "Boosting Rounds",
best_rmse = "Best RMSE"
)%>%
gtsave("xgboost_hyperparams.png")
